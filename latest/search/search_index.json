{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara modules for: playground \u00b6 This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara . Description \u00b6 TODO Package content \u00b6 Core modules \u00b6 playground.lena.graph_components : -- n/a -- playground.mariella.language.tokenize : -- n/a -- playground.mariella.text_preprocessing.preprocess : -- n/a -- playground.markus.filter_table_by_date : -- n/a -- playground.markus.from_file : Load table-like data from a kiara file object (not a path!). playground.markus.topic_modeling.extract_date_and_pub_ref : -- n/a -- playground.sandbox.example : A very simple example module; concatenate two strings. Pipelines \u00b6 Value types \u00b6 Metadata schemas \u00b6 Links \u00b6 Documentation: https://dharpa.org/kiara-playground Code: https://github.com/DHARPA-Project/kiara-playground","title":"Home"},{"location":"#kiara-modules-for-playground","text":"This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara .","title":"kiara modules for: playground"},{"location":"#description","text":"TODO","title":"Description"},{"location":"#package-content","text":"","title":"Package content"},{"location":"#core-modules","text":"playground.lena.graph_components : -- n/a -- playground.mariella.language.tokenize : -- n/a -- playground.mariella.text_preprocessing.preprocess : -- n/a -- playground.markus.filter_table_by_date : -- n/a -- playground.markus.from_file : Load table-like data from a kiara file object (not a path!). playground.markus.topic_modeling.extract_date_and_pub_ref : -- n/a -- playground.sandbox.example : A very simple example module; concatenate two strings.","title":"Core modules"},{"location":"#pipelines","text":"","title":"Pipelines"},{"location":"#value-types","text":"","title":"Value types"},{"location":"#metadata-schemas","text":"","title":"Metadata schemas"},{"location":"#links","text":"Documentation: https://dharpa.org/kiara-playground Code: https://github.com/DHARPA-Project/kiara-playground","title":"Links"},{"location":"examples/","text":"Examples \u00b6 Command-line \u00b6 Import ('onboard') a file \u00b6 The import.local_file module can be used to import any file. Internally, it will extract some metadata (file size, hash, original name, ...) and copy the file into the internal kiara data store, where it should be safe from external (or any, really) modification. kiara run import.local_file path=examples/data/misc/photo_with_gps_metadata_1.jpg aliases=photo1 Check whether the file is imported using one of those commands: kiara data list kiara data explain photo1 Import ('onboard') a csv file as a table \u00b6 kiara run table.import.from_local_file path=examples/data/journals/JournalNodes1902.csv aliases=journal_1902_nodes You should see two now data items when doing kiara data list : one for the file (this one won't have an alias because we didn't give it any), and one for the table itself. Run a sql query against the newly imported table: \u00b6 kiara run table.query.sql table=value:journal_1902_nodes query=\"select * from data where City='Berlin'\" We could also save the query result into the kiara data store: kiara run table.query.sql table=value:journal_1902_nodes query=\"select * from data where City='Berlin'\" --save --alias query_result=berlin_journals Now check the metadata of the saved result via the explain command: kiara data explain berlin_journals Python \u00b6 To be done","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#command-line","text":"","title":"Command-line"},{"location":"examples/#import-onboard-a-file","text":"The import.local_file module can be used to import any file. Internally, it will extract some metadata (file size, hash, original name, ...) and copy the file into the internal kiara data store, where it should be safe from external (or any, really) modification. kiara run import.local_file path=examples/data/misc/photo_with_gps_metadata_1.jpg aliases=photo1 Check whether the file is imported using one of those commands: kiara data list kiara data explain photo1","title":"Import ('onboard') a file"},{"location":"examples/#import-onboard-a-csv-file-as-a-table","text":"kiara run table.import.from_local_file path=examples/data/journals/JournalNodes1902.csv aliases=journal_1902_nodes You should see two now data items when doing kiara data list : one for the file (this one won't have an alias because we didn't give it any), and one for the table itself.","title":"Import ('onboard') a csv file as a table"},{"location":"examples/#run-a-sql-query-against-the-newly-imported-table","text":"kiara run table.query.sql table=value:journal_1902_nodes query=\"select * from data where City='Berlin'\" We could also save the query result into the kiara data store: kiara run table.query.sql table=value:journal_1902_nodes query=\"select * from data where City='Berlin'\" --save --alias query_result=berlin_journals Now check the metadata of the saved result via the explain command: kiara data explain berlin_journals","title":"Run a sql query against the newly imported table:"},{"location":"examples/#python","text":"To be done","title":"Python"},{"location":"modules_list/","text":"Available module types \u00b6 This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Included modules"},{"location":"modules_list/#available-module-types","text":"This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available module types"},{"location":"pipelines_list/","text":"Available pipeline module types \u00b6 This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Included pipelines"},{"location":"pipelines_list/#available-pipeline-module-types","text":"This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available pipeline module types"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"api_reference/kiara_modules.playground.lena/","text":"kiara_modules.playground.lena \u00b6 FindLargestComponentsModuleConfig pydantic-model \u00b6 find_largest_component : bool pydantic-field \u00b6 Find the largest component of a graph. number_of_components : bool pydantic-field \u00b6 Count the number of components. GrpahComponentsModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/lena/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/lena/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network_graph\" , \"doc\" : \"A sub-graph of the largest component of the graph.\" , } if self . get_config_value ( \"number_of_components\" ): result [ \"number_of_components\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of components in the graph.\" , } return result","title":"\u279c\u2007lena"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modulesplaygroundlena","text":"","title":"kiara_modules.playground.lena"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.__init__.FindLargestComponentsModuleConfig","text":"","title":"FindLargestComponentsModuleConfig"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.__init__.FindLargestComponentsModuleConfig.find_largest_component","text":"Find the largest component of a graph.","title":"find_largest_component"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.__init__.FindLargestComponentsModuleConfig.number_of_components","text":"Count the number of components.","title":"number_of_components"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.__init__.GrpahComponentsModule","text":"","title":"GrpahComponentsModule"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.__init__.GrpahComponentsModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/lena/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.lena/#kiara_modules.playground.lena.__init__.GrpahComponentsModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/lena/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network_graph\" , \"doc\" : \"A sub-graph of the largest component of the graph.\" , } if self . get_config_value ( \"number_of_components\" ): result [ \"number_of_components\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of components in the graph.\" , } return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.mariella.language/","text":"kiara_modules.playground.mariella.language \u00b6 TokenizeModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/mariella/language.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table that contains the column to tokenize.\" , }, \"column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the content to tokenize.\" , \"default\" : \"content\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/mariella/language.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } }","title":"\u279c\u2007mariella.language"},{"location":"api_reference/kiara_modules.playground.mariella.language/#kiara_modulesplaygroundmariellalanguage","text":"","title":"kiara_modules.playground.mariella.language"},{"location":"api_reference/kiara_modules.playground.mariella.language/#kiara_modules.playground.mariella.language.TokenizeModule","text":"","title":"TokenizeModule"},{"location":"api_reference/kiara_modules.playground.mariella.language/#kiara_modules.playground.mariella.language.TokenizeModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/mariella/language.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The table that contains the column to tokenize.\" , }, \"column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the content to tokenize.\" , \"default\" : \"content\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.mariella.language/#kiara_modules.playground.mariella.language.TokenizeModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/mariella/language.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.mariella/","text":"kiara_modules.playground.mariella \u00b6","title":"\u279c\u2007mariella"},{"location":"api_reference/kiara_modules.playground.mariella/#kiara_modulesplaygroundmariella","text":"","title":"kiara_modules.playground.mariella"},{"location":"api_reference/kiara_modules.playground.mariella.text_preprocessing/","text":"kiara_modules.playground.mariella.text_preprocessing \u00b6 PreprocessModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/mariella/text_preprocessing.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"array\" : { \"type\" : \"array\" , \"doc\" : \"The column to pre-process.\" , }, \"lowercase\" : { \"type\" : \"boolean\" , \"doc\" : \"Apply lowercasing to the text.\" , \"default\" : False , }, \"preprocess_method\" : { \"type\" : \"integer\" , \"doc\" : \"Pre-processing methodology\" , \"default\" : 0 , }, \"remove_short_tokens\" : { \"type\" : \"integer\" , \"doc\" : \"Remove tokens shorter than a certain length\" , \"default\" : 0 , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/mariella/text_preprocessing.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"preprocessed_array\" : { \"type\" : \"array\" , \"doc\" : \"The pre-processed content, as an array of lists of strings.\" , } }","title":"\u279c\u2007mariella.text_preprocessing"},{"location":"api_reference/kiara_modules.playground.mariella.text_preprocessing/#kiara_modulesplaygroundmariellatext_preprocessing","text":"","title":"kiara_modules.playground.mariella.text_preprocessing"},{"location":"api_reference/kiara_modules.playground.mariella.text_preprocessing/#kiara_modules.playground.mariella.text_preprocessing.PreprocessModule","text":"","title":"PreprocessModule"},{"location":"api_reference/kiara_modules.playground.mariella.text_preprocessing/#kiara_modules.playground.mariella.text_preprocessing.PreprocessModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/mariella/text_preprocessing.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"array\" : { \"type\" : \"array\" , \"doc\" : \"The column to pre-process.\" , }, \"lowercase\" : { \"type\" : \"boolean\" , \"doc\" : \"Apply lowercasing to the text.\" , \"default\" : False , }, \"preprocess_method\" : { \"type\" : \"integer\" , \"doc\" : \"Pre-processing methodology\" , \"default\" : 0 , }, \"remove_short_tokens\" : { \"type\" : \"integer\" , \"doc\" : \"Remove tokens shorter than a certain length\" , \"default\" : 0 , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.mariella.text_preprocessing/#kiara_modules.playground.mariella.text_preprocessing.PreprocessModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/mariella/text_preprocessing.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"preprocessed_array\" : { \"type\" : \"array\" , \"doc\" : \"The pre-processed content, as an array of lists of strings.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.markus/","text":"kiara_modules.playground.markus \u00b6 CreateGraphFromFileModule \u00b6 Load table-like data from a kiara file object (not a path!). create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains table data.\" , \"optional\" : False , } } if self . get_config_value ( \"allow_column_filter\" ): inputs [ \"columns\" ] = { \"type\" : \"array\" , \"doc\" : \"If provided, only import the columns that match items in this list.\" , \"optional\" : False , } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"the imported table\" }} MyFirstModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/__init__.py def create_input_schema ( self ): return { \"table_input\" : { \"type\" : \"table\" , \"doc\" : \"The table that will be filtered.\" }, \"date\" : { \"type\" : \"date\" , \"doc\" : \"The minimum date, earlier dates will be filtered out.\" , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/__init__.py def create_output_schema ( self ): return { \"table_output\" : { \"type\" : \"table\" , \"doc\" : \"The filtered table.\" }}","title":"\u279c\u2007markus"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modulesplaygroundmarkus","text":"","title":"kiara_modules.playground.markus"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.CreateGraphFromFileModule","text":"Load table-like data from a kiara file object (not a path!).","title":"CreateGraphFromFileModule"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.CreateGraphFromFileModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/__init__.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains table data.\" , \"optional\" : False , } } if self . get_config_value ( \"allow_column_filter\" ): inputs [ \"columns\" ] = { \"type\" : \"array\" , \"doc\" : \"If provided, only import the columns that match items in this list.\" , \"optional\" : False , } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.CreateGraphFromFileModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/__init__.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"the imported table\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.MyFirstModule","text":"","title":"MyFirstModule"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.MyFirstModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/__init__.py def create_input_schema ( self ): return { \"table_input\" : { \"type\" : \"table\" , \"doc\" : \"The table that will be filtered.\" }, \"date\" : { \"type\" : \"date\" , \"doc\" : \"The minimum date, earlier dates will be filtered out.\" , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.markus/#kiara_modules.playground.markus.__init__.MyFirstModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/__init__.py def create_output_schema ( self ): return { \"table_output\" : { \"type\" : \"table\" , \"doc\" : \"The filtered table.\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.markus.streamlit/","text":"kiara_modules.playground.markus.streamlit \u00b6","title":"\u279c\u2007markus.streamlit"},{"location":"api_reference/kiara_modules.playground.markus.streamlit/#kiara_modulesplaygroundmarkusstreamlit","text":"","title":"kiara_modules.playground.markus.streamlit"},{"location":"api_reference/kiara_modules.playground.markus.topic_modeling/","text":"kiara_modules.playground.markus.topic_modeling \u00b6 ExtractDateAndPubRefModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/topic_modeling.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file_name_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of file names.\" }, \"pub_name_replacement_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with pub_refs as keys, and publication names as values.\" , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/topic_modeling.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"dates\" : { \"type\" : \"array\" , \"doc\" : \"An array of extracted dates.\" }, \"pub_refs\" : { \"type\" : \"array\" , \"doc\" : \"An array of publication references.\" }, \"pub_names\" : { \"type\" : \"array\" , \"doc\" : \"An array of publication names.\" }, }","title":"\u279c\u2007markus.topic_modeling"},{"location":"api_reference/kiara_modules.playground.markus.topic_modeling/#kiara_modulesplaygroundmarkustopic_modeling","text":"","title":"kiara_modules.playground.markus.topic_modeling"},{"location":"api_reference/kiara_modules.playground.markus.topic_modeling/#kiara_modules.playground.markus.topic_modeling.ExtractDateAndPubRefModule","text":"","title":"ExtractDateAndPubRefModule"},{"location":"api_reference/kiara_modules.playground.markus.topic_modeling/#kiara_modules.playground.markus.topic_modeling.ExtractDateAndPubRefModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/topic_modeling.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file_name_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of file names.\" }, \"pub_name_replacement_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with pub_refs as keys, and publication names as values.\" , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.markus.topic_modeling/#kiara_modules.playground.markus.topic_modeling.ExtractDateAndPubRefModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/markus/topic_modeling.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"dates\" : { \"type\" : \"array\" , \"doc\" : \"An array of extracted dates.\" }, \"pub_refs\" : { \"type\" : \"array\" , \"doc\" : \"An array of publication references.\" }, \"pub_names\" : { \"type\" : \"array\" , \"doc\" : \"An array of publication names.\" }, }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground/","text":"kiara_modules.playground \u00b6 Top-level package for kiara-playground.","title":"kiara_modules.playground"},{"location":"api_reference/kiara_modules.playground/#kiara_modulesplayground","text":"Top-level package for kiara-playground.","title":"kiara_modules.playground"},{"location":"api_reference/kiara_modules.playground.metadata_schemas/","text":"kiara_modules.playground.metadata_schemas \u00b6 This module contains the metadata models that are used in the kiara-playground package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel .","title":"\u279c\u2007metadata_schemas"},{"location":"api_reference/kiara_modules.playground.metadata_schemas/#kiara_modulesplaygroundmetadata_schemas","text":"This module contains the metadata models that are used in the kiara-playground package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel .","title":"kiara_modules.playground.metadata_schemas"},{"location":"api_reference/kiara_modules.playground.pipelines/","text":"kiara_modules.playground.pipelines \u00b6 Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"\u279c\u2007pipelines"},{"location":"api_reference/kiara_modules.playground.pipelines/#kiara_modulesplaygroundpipelines","text":"Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"kiara_modules.playground.pipelines"},{"location":"api_reference/kiara_modules.playground.sandbox/","text":"kiara_modules.playground.sandbox \u00b6 ExampleModule \u00b6 A very simple example module; concatenate two strings. The purpose of this module is to show the main elements of a KiaraModule : the (optional) configuration : must inherit from ModuleTypeConfig , and the config class must be set as the \"_config_cls\" attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with one of the relevant kiara commands: kiara module explain-type playground.sandbox.example kiara module explain-instance playground.sandbox.example kiara run playground.sandbox.example text_1=\"xxx\" text_2=\"yyy\" To set a different separator in the config for this module, and use that via the cli, you could do: kiara run playground.sandbox.example --module-config separator=\".\" text_1=\"xxx\" text_2=\"yyy\" create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/sandbox.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/sandbox.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs ExampleModuleConfig pydantic-model \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"\u279c\u2007sandbox"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modulesplaygroundsandbox","text":"","title":"kiara_modules.playground.sandbox"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModule","text":"A very simple example module; concatenate two strings. The purpose of this module is to show the main elements of a KiaraModule : the (optional) configuration : must inherit from ModuleTypeConfig , and the config class must be set as the \"_config_cls\" attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with one of the relevant kiara commands: kiara module explain-type playground.sandbox.example kiara module explain-instance playground.sandbox.example kiara run playground.sandbox.example text_1=\"xxx\" text_2=\"yyy\" To set a different separator in the config for this module, and use that via the cli, you could do: kiara run playground.sandbox.example --module-config separator=\".\" text_1=\"xxx\" text_2=\"yyy\"","title":"ExampleModule"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in playground/sandbox.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in playground/sandbox.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModuleConfig","text":"","title":"ExampleModuleConfig"},{"location":"api_reference/kiara_modules.playground.sandbox/#kiara_modules.playground.sandbox.ExampleModuleConfig.separator","text":"The seperator between the two strings.","title":"separator"},{"location":"api_reference/kiara_modules.playground.value_types/","text":"kiara_modules.playground.value_types \u00b6 This module contains the value type classes that are used in the kiara-playground package.","title":"\u279c\u2007value_types"},{"location":"api_reference/kiara_modules.playground.value_types/#kiara_modulesplaygroundvalue_types","text":"This module contains the value type classes that are used in the kiara-playground package.","title":"kiara_modules.playground.value_types"}]}